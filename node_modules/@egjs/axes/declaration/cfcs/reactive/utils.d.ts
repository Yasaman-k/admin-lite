import { Observer } from "./Observer";
import { ReactiveMethods } from "./types";
import { Ref } from "../core";
export declare function withReactiveMethods<Instance, Names extends keyof Partial<Instance>, Return extends ReactiveMethods<Instance, Names>>(ref: Ref<Instance>, methods: readonly Names[]): Return;
export declare function getObservers(instance: any): Record<string, Observer<any>>;
export declare function getObserver(instance: any, name: string, defaultValue?: any): Observer<any>;
export declare function ReactiveSubscribe(Constructor: any): void;
export interface ReactiveSubscribe<Properties extends Record<string, any>> {
    subscribe<Name extends keyof Properties = keyof Properties>(name: Name, callback: (value: Properties[Name]) => void): void;
    unsubscribe<Name extends keyof Properties = keyof Properties>(name?: Name, callback?: (value: Properties[Name]) => void): void;
}
