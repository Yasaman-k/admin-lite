import { ComponentEvent } from "@egjs/component";
import { ReactiveSubscribe } from "./utils";
declare type AnyFunction = (...args: any[]) => any;
declare type NoArguments = undefined | null | void | never;
declare type EventKey<T extends Record<string, any>> = string & keyof T;
declare type UnknwonToAnyArray<Arr> = unknown[] extends Arr ? any[] : Arr;
export declare type ReactiveEventCallback<T extends Record<string, any>, K extends EventKey<T>> = T[K] extends NoArguments ? () => any : T[K] extends AnyFunction ? T[K] : T[K] extends ComponentEvent<infer PROPS> ? (event: ComponentEvent<PROPS, K>) => any : (event: T[K]) => any;
export declare type ReactiveEventParameters<Events extends Record<string, any>, EventName extends EventKey<Events>> = UnknwonToAnyArray<Parameters<ReactiveEventCallback<Events, EventName>>>;
export declare type ReactiveMethods<Instance, Names extends keyof Instance> = {
    [key in Names]: Instance[key];
};
export declare type ReactiveAdapter<Instance extends ReactiveSubscribe<Record<string, any>>, State extends Record<string, any> = {}, Methods extends keyof Partial<Instance> = never, Data = any, Events extends Record<string, any> = {}> = {
    state: State;
    data?: () => Data;
    instance: (data: Data) => Instance;
    methods: readonly Methods[];
    events: readonly (keyof Events)[];
    destroy: (instance: Instance, data: Data) => void;
    on?: <EventName extends EventKey<Events>>(instance: Instance, eventName: EventName, listener: ReactiveEventCallback<Events, EventName>) => void;
    off?: <EventName extends EventKey<Events>>(instance: Instance, eventName: EventName, listener: ReactiveEventCallback<Events, EventName>) => void;
};
export {};
