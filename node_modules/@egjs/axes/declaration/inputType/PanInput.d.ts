import { ActiveEvent, ElementType, InputEventType } from "../types";
import { InputType, InputTypeObserver } from "./InputType";
export interface PanInputOption {
    inputType?: string[];
    inputButton?: string[];
    scale?: number[];
    thresholdAngle?: number;
    threshold?: number;
    iOSEdgeSwipeThreshold?: number;
    releaseOnScroll?: boolean;
    touchAction?: string;
}
export declare const getDirectionByAngle: (angle: number, thresholdAngle: number) => number;
export declare class PanInput implements InputType {
    options: PanInputOption;
    axes: string[];
    element: HTMLElement;
    protected _observer: InputTypeObserver;
    protected _direction: number;
    protected _enabled: boolean;
    protected _activeEvent: ActiveEvent;
    private _originalCssProps;
    private _atRightEdge;
    private _rightEdgeTimer;
    constructor(el: ElementType, options?: PanInputOption);
    mapAxes(axes: string[]): void;
    connect(observer: InputTypeObserver): InputType;
    disconnect(): this;
    destroy(): void;
    enable(): this;
    disable(): this;
    isEnabled(): boolean;
    protected _onPanstart(event: InputEventType): void;
    protected _onPanmove(event: InputEventType): void;
    protected _onPanend(event: InputEventType): void;
    protected _attachWindowEvent(activeEvent: ActiveEvent): void;
    protected _detachWindowEvent(activeEvent: ActiveEvent): void;
    protected _getOffset(properties: number[], direction: boolean[]): number[];
    private _attachElementEvent;
    private _detachElementEvent;
    private _forceRelease;
    private _voidFunction;
}
