var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { $, isCssPropsFromAxes, setCssProps, revertCssProps, useDirection, getDirection, } from "../utils";
import { IS_IOS_SAFARI, IOS_EDGE_THRESHOLD, DIRECTION_NONE, DIRECTION_VERTICAL, DIRECTION_HORIZONTAL, MOUSE_LEFT, } from "../const";
import { convertInputType, toAxis, } from "./InputType";
export var getDirectionByAngle = function (angle, thresholdAngle) {
    if (thresholdAngle < 0 || thresholdAngle > 90) {
        return DIRECTION_NONE;
    }
    var toAngle = Math.abs(angle);
    return toAngle > thresholdAngle && toAngle < 180 - thresholdAngle
        ? DIRECTION_VERTICAL
        : DIRECTION_HORIZONTAL;
};
var PanInput = (function () {
    function PanInput(el, options) {
        var _this = this;
        this.axes = [];
        this.element = null;
        this._enabled = false;
        this._activeEvent = null;
        this._atRightEdge = false;
        this._rightEdgeTimer = 0;
        this._forceRelease = function () {
            var activeEvent = _this._activeEvent;
            var prevEvent = activeEvent.prevEvent;
            activeEvent.onRelease();
            _this._observer.release(_this, prevEvent, [0, 0]);
            _this._detachWindowEvent(activeEvent);
        };
        this._voidFunction = function () { };
        this.element = $(el);
        this.options = __assign({ inputType: ["touch", "mouse", "pointer"], inputButton: [MOUSE_LEFT], scale: [1, 1], thresholdAngle: 45, threshold: 0, iOSEdgeSwipeThreshold: IOS_EDGE_THRESHOLD, releaseOnScroll: false, touchAction: null }, options);
        this._onPanstart = this._onPanstart.bind(this);
        this._onPanmove = this._onPanmove.bind(this);
        this._onPanend = this._onPanend.bind(this);
    }
    PanInput.prototype.mapAxes = function (axes) {
        this._direction = getDirection(!!axes[0], !!axes[1]);
        this.axes = axes;
    };
    PanInput.prototype.connect = function (observer) {
        if (this._activeEvent) {
            this._detachElementEvent();
            this._detachWindowEvent(this._activeEvent);
        }
        this._attachElementEvent(observer);
        this._originalCssProps = setCssProps(this.element, this.options, this._direction);
        return this;
    };
    PanInput.prototype.disconnect = function () {
        this._detachElementEvent();
        this._detachWindowEvent(this._activeEvent);
        if (!isCssPropsFromAxes(this._originalCssProps)) {
            revertCssProps(this.element, this._originalCssProps);
        }
        this._direction = DIRECTION_NONE;
        return this;
    };
    PanInput.prototype.destroy = function () {
        this.disconnect();
        this.element = null;
    };
    PanInput.prototype.enable = function () {
        this._enabled = true;
        return this;
    };
    PanInput.prototype.disable = function () {
        this._enabled = false;
        return this;
    };
    PanInput.prototype.isEnabled = function () {
        return this._enabled;
    };
    PanInput.prototype._onPanstart = function (event) {
        var activeEvent = this._activeEvent;
        var panEvent = activeEvent.onEventStart(event, this.options.inputButton);
        if (!panEvent || !this._enabled || activeEvent.getTouches(event) > 1) {
            return;
        }
        if (panEvent.srcEvent.cancelable !== false) {
            var edgeThreshold = this.options.iOSEdgeSwipeThreshold;
            this._observer.hold(this, panEvent);
            this._atRightEdge =
                IS_IOS_SAFARI && panEvent.center.x > window.innerWidth - edgeThreshold;
            this._attachWindowEvent(activeEvent);
            activeEvent.prevEvent = panEvent;
        }
    };
    PanInput.prototype._onPanmove = function (event) {
        var _this = this;
        var activeEvent = this._activeEvent;
        var panEvent = activeEvent.onEventMove(event, this.options.inputButton);
        if (!panEvent || !this._enabled || activeEvent.getTouches(event) > 1) {
            return;
        }
        var _a = this.options, iOSEdgeSwipeThreshold = _a.iOSEdgeSwipeThreshold, releaseOnScroll = _a.releaseOnScroll;
        var userDirection = getDirectionByAngle(panEvent.angle, this.options.thresholdAngle);
        if (releaseOnScroll && !panEvent.srcEvent.cancelable) {
            this._onPanend(event);
            return;
        }
        if (activeEvent.prevEvent && IS_IOS_SAFARI) {
            var swipeLeftToRight = panEvent.center.x < 0;
            if (swipeLeftToRight) {
                this._forceRelease();
                return;
            }
            else if (this._atRightEdge) {
                clearTimeout(this._rightEdgeTimer);
                var swipeRightToLeft = panEvent.deltaX < -iOSEdgeSwipeThreshold;
                if (swipeRightToLeft) {
                    this._atRightEdge = false;
                }
                else {
                    this._rightEdgeTimer = window.setTimeout(function () { return _this._forceRelease(); }, 100);
                }
            }
        }
        var offset = this._getOffset([panEvent.offsetX, panEvent.offsetY], [
            useDirection(DIRECTION_HORIZONTAL, this._direction, userDirection),
            useDirection(DIRECTION_VERTICAL, this._direction, userDirection),
        ]);
        var prevent = offset.some(function (v) { return v !== 0; });
        if (prevent) {
            if (panEvent.srcEvent.cancelable !== false) {
                panEvent.srcEvent.preventDefault();
            }
            panEvent.srcEvent.stopPropagation();
        }
        panEvent.preventSystemEvent = prevent;
        if (prevent) {
            this._observer.change(this, panEvent, toAxis(this.axes, offset));
        }
        activeEvent.prevEvent = panEvent;
    };
    PanInput.prototype._onPanend = function (event) {
        var activeEvent = this._activeEvent;
        activeEvent.onEventEnd(event);
        if (!this._enabled || activeEvent.getTouches(event) !== 0) {
            return;
        }
        this._detachWindowEvent(activeEvent);
        clearTimeout(this._rightEdgeTimer);
        var prevEvent = activeEvent.prevEvent;
        var velocity = this._getOffset([
            Math.abs(prevEvent.velocityX) * (prevEvent.offsetX < 0 ? -1 : 1),
            Math.abs(prevEvent.velocityY) * (prevEvent.offsetY < 0 ? -1 : 1),
        ], [
            useDirection(DIRECTION_HORIZONTAL, this._direction),
            useDirection(DIRECTION_VERTICAL, this._direction),
        ]);
        activeEvent.onRelease();
        this._observer.release(this, prevEvent, velocity);
    };
    PanInput.prototype._attachWindowEvent = function (activeEvent) {
        var _this = this;
        activeEvent === null || activeEvent === void 0 ? void 0 : activeEvent.move.forEach(function (event) {
            window.addEventListener(event, _this._onPanmove, { passive: false });
        });
        activeEvent === null || activeEvent === void 0 ? void 0 : activeEvent.end.forEach(function (event) {
            window.addEventListener(event, _this._onPanend, { passive: false });
        });
    };
    PanInput.prototype._detachWindowEvent = function (activeEvent) {
        var _this = this;
        activeEvent === null || activeEvent === void 0 ? void 0 : activeEvent.move.forEach(function (event) {
            window.removeEventListener(event, _this._onPanmove);
        });
        activeEvent === null || activeEvent === void 0 ? void 0 : activeEvent.end.forEach(function (event) {
            window.removeEventListener(event, _this._onPanend);
        });
    };
    PanInput.prototype._getOffset = function (properties, direction) {
        var scale = this.options.scale;
        return [
            direction[0] ? properties[0] * scale[0] : 0,
            direction[1] ? properties[1] * scale[1] : 0,
        ];
    };
    PanInput.prototype._attachElementEvent = function (observer) {
        var _this = this;
        var activeEvent = convertInputType(this.options.inputType);
        if (!activeEvent) {
            return;
        }
        this._observer = observer;
        this._enabled = true;
        this._activeEvent = activeEvent;
        activeEvent.start.forEach(function (event) {
            var _a;
            (_a = _this.element) === null || _a === void 0 ? void 0 : _a.addEventListener(event, _this._onPanstart);
        });
        activeEvent.move.forEach(function (event) {
            var _a;
            (_a = _this.element) === null || _a === void 0 ? void 0 : _a.addEventListener(event, _this._voidFunction);
        });
    };
    PanInput.prototype._detachElementEvent = function () {
        var _this = this;
        var activeEvent = this._activeEvent;
        activeEvent === null || activeEvent === void 0 ? void 0 : activeEvent.start.forEach(function (event) {
            var _a;
            (_a = _this.element) === null || _a === void 0 ? void 0 : _a.removeEventListener(event, _this._onPanstart);
        });
        activeEvent === null || activeEvent === void 0 ? void 0 : activeEvent.move.forEach(function (event) {
            var _a;
            (_a = _this.element) === null || _a === void 0 ? void 0 : _a.removeEventListener(event, _this._voidFunction);
        });
        this._enabled = false;
        this._observer = null;
    };
    return PanInput;
}());
export { PanInput };
//# sourceMappingURL=PanInput.js.map