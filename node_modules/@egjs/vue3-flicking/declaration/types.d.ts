import { ComponentOptionsMixin, DefineComponent, VNode } from "vue";
import VanillaFlicking, { Plugin, Status, FlickingOptions, FlickingEvents } from "@egjs/flicking";
import Component from "@egjs/component";
import ListDiffer, { DiffResult } from "@egjs/list-differ";
import FlickingProps from "./FlickingProps";
export interface FlickingData {
    renderEmitter: Component<{
        render: void;
    }>;
    vanillaFlicking: VanillaFlicking;
    pluginsDiffer: ListDiffer<Plugin>;
    slotDiffer: ListDiffer<VNode>;
    diffResult: DiffResult<VNode> | null;
}
declare type VueFlickingEmits = {
    [key in keyof FlickingEvents]: (evt: FlickingEvents[key]) => any;
};
export declare type VueFlicking = DefineComponent<typeof FlickingProps, unknown, FlickingData, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, VueFlickingEmits, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    viewportTag?: unknown;
    cameraTag?: unknown;
    hideBeforeInit?: unknown;
    firstPanelSize?: unknown;
    options?: unknown;
    plugins?: unknown;
    status?: unknown;
} & {
    viewportTag: string;
    cameraTag: string;
    hideBeforeInit: boolean;
    options: Partial<FlickingOptions>;
    plugins: Plugin[];
} & {
    firstPanelSize?: string;
    status?: Status;
} & {
    [K in keyof VueFlickingEmits as `on${Capitalize<K>}`]?: VueFlickingEmits[K];
}>, {
    viewportTag: string;
    cameraTag: string;
    hideBeforeInit: boolean;
    options: Partial<FlickingOptions>;
    plugins: Plugin[];
}>;
export {};
